//https://en.wikipedia.org/wiki/List_of_fractals_by_Hausdorff_dimension

/*
diferenças minilibx e MLX codam
mlx_init -> mlx_init_window
mlx_init da codam já cria a janela, enquanto a da minilibx não. A da minilibx só cria a conexão.
então ela recebe parametros para a criação da janela também.

as structs de imagem são diferentes. Você nao tem uma mlx_get_address pra modificar valores da imagem.

typedef struct mlx_image
{
	const uint32_t	width;
	const uint32_t	height;
	uint8_t*		pixels;
	mlx_instance_t*	instances;
	size_t			count;
	bool			enabled;
	void*			context;
}	mlx_image_t;


*/


// -lm -lmlx -lXext -lX11 -L minilibx-linux/

//link with -lmlx -lXext -lX11 -L path/to/libs/
// gcc myfile.c -o myfile -lm // -lm is for math.h
// -lmlx -lXext -lX11 -L
// https://github.com/codam-coding-college/MLX42
// AMD ROCm (Radeon Open Compute) is an open-source software foundation for GPU computing on Linux.
//Install it to try running fractol on GPU
// CUDA is a parallel computing platform and application programming interface model created by Nvidia.
// OpenCL (Open Computing Language) is a framework for writing programs that execute across heterogeneous platforms consisting of central processing units (CPUs), graphics processing units (GPUs), digital signal processors (DSPs), field-programmable gate arrays (FPGAs) and other processors or hardware accelerators. OpenCL specifies programming languages (based on C99 and C++11) for programming these devices and application programming interfaces (APIs) to control the platform and execute programs on the compute devices. OpenCL provides a standard interface for parallel computing using task- and data-based parallelism.
// Overall, OpenCL serves as an open and standard framework for parallel computing across different GPU architectures, similar to how CUDA is specific to NVIDIA GPUs.
// https://github.com/paulo-santana/fractol-gpu
//https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values
// https://github.com/librity/ft_fractol


//gcc *.c MLX42/build/libmlx42.a -Iinclude -ldl -lglfw -pthread -lm


//git@github.com:Xyckens/fract-ol.git
//gcc *.c MLX42/build/libmlx42.a -Iinclude -ldl -lglfw -pthread -lm
//valgrind --leak-check=full -s ./a.out mandelbrot

// gcc *.c MLX42/build/libmlx42.a -Iinclude -O3 -ldl -lglfw -pthread -lm && ./a.out julia 0.285 0.01
// gcc *.c MLX42/build/libmlx42.a -Iinclude -O3 -ldl -lglfw -pthread -lm && ./a.out julia -0.8 0.156


October, 2023, cmake version of 42 Sao Paulo could not compile libmlx42.a, so I included a compiled version.


CODAM MLX lib has some advantages:
you dont need to worry about key mapping. It comes mapped.
mlx_terminate() frees everything*.

*actually CODAM's MLX has a few leaks, including in mlx_init function.
to 
valgrind --leak-check=full --show-leak-kinds=all --gen-suppressions=all --suppressions=./MLX42Codam/suppress.sup ./fractol mandelbrot
you will have way less projects to check.


avoid calling functions on hooks without conditions. 

For instance, your rendering functions. After changing a parameter you will have to re-render.
Call 



